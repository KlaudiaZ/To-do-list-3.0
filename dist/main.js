!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports["my-library"]=e():t["my-library"]=e()}(window,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);n(5);const r="https://todoapihost.000webhostapp.com/api/";var o={url:{getList:r+"getList.php",addTask:r+"addTask.php",updateTask:r+"updateTask.php",deleteTask:r+"deleteTask.php"},priority:{1:"",2:"table-success",3:"table-info",4:"table-warning",5:"table-danger"}};var i=class{static getTasksFromServer(){return new Promise((t,e)=>{let n=new XMLHttpRequest;const r=o.url.getList;n.open("GET",r,!0),n.onload=function(){t(JSON.parse(this.response))},n.onerror=function(){e("Error: connection failed.")},n.send()})}static removeTaskFromServer(t){return new Promise((e,n)=>{let r=new XMLHttpRequest;const i=o.url.deleteTask;r.open("DELETE",i,!0),r.onload=function(){e(JSON.parse(this.response))},r.onerror=function(){n("Error: failed to delete the item.")},r.send(JSON.stringify({id:t}))})}static updateTask(t){return new Promise((e,n)=>{let r=new XMLHttpRequest;const i=o.url.updateTask;r.open("PUT",i,!0),r.onload=function(){e(JSON.parse(this.response))},r.onerror=function(){n("Error: failed to update the task.")},r.send(JSON.stringify(t))})}static addTask(t){return new Promise((e,n)=>{let r=new XMLHttpRequest;const i=o.url.addTask;r.open("POST",i,!0),r.onload=function(){e(JSON.parse(this.response))},r.onerror=function(){n("Error: failed to add new task.")},r.send(JSON.stringify(t))})}};var s=class{constructor(t,e,n,r,o){this.id=t,this.title=e,this.details=n,this.priority=r,this.isDone=o,this.id=t,this.title=e,this.details=n,this.priority=r,this.isDone=o}render(t,e,n){const r=document.createElement("tr");return 0==this.isDone?(r.setAttribute("class",`${o.priority[this.priority]}`),r.setAttribute("data-id",`${this.id}`),r.innerHTML=`\n                <th scope="row">${t}</th>\n                <td>${this.title}</td>\n                <td>${this.details}</td>\n                <td>${this.priority}</td>\n                <td><input class="form-check-input" type="checkbox"></td>\n                <td class="edit"><img src="img/pencil_and_paper-512.png" width="24" height="24"></td>\n                <td class="remove"><img src="img/Trash_Can-512.png" width="24" height="24"></td>\n            `,e.appendChild(r),!1):(r.innerHTML=`\n                <li class="list-group-item d-flex justify-content-between align-items-center completed" data-id="${this.id}">\n                    ${this.title}\n                </li>\n            `,n.appendChild(r),!0)}},a=function(t,e,n,r){return new(n||(n=Promise))(function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(s,a)}c((r=r.apply(t,e||[])).next())})};const c=t=>{i.updateTask(t).then(t=>{const e=new h;console.log(t),e.render()}).catch(t=>{console.log(t)})},d=function(t,e){const n=e.find(e=>e.id===t);n.isDone="1",i.updateTask(n).then(t=>{console.log(t),(new h).render()}).catch(t=>{console.log(t)})},l=function(t,e){const n=e.find(e=>e.id===t);n.isDone="0",i.updateTask(n).then(t=>{console.log(t),(new h).render()}).catch(t=>{console.log(t)})};var u=function(t,e,n,r){return new(n||(n=Promise))(function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(s,a)}c((r=r.apply(t,e||[])).next())})};const p=function(t){const e=new h;i.removeTaskFromServer(t).then(t=>{console.log(t),e.render()}).catch(t=>{console.log(t)})},f=function(t){return u(this,void 0,void 0,function*(){const e=new h;t.forEach((n,r)=>{i.removeTaskFromServer(n).then(n=>{console.log(n),r+1===t.length&&e.render()}).catch(t=>{console.log(t)})})})};var h=class{constructor(t){this.form=new v,this.completed=[],t&&this.render()}storeCompleted(){document.querySelectorAll(".completed").forEach(t=>{const e=parseInt(t.getAttribute("data-id"));this.completed.push(e)})}bindEdit(t){const e=this;document.querySelectorAll(".edit").forEach(n=>{n.addEventListener("click",function(){const n=this.parentElement.getAttribute("data-id"),r=t.find(t=>t.id===n);e.form.enableEdit(r)})})}bindRemove(){document.querySelectorAll(".remove").forEach(t=>{t.addEventListener("click",function(){const t=this.parentElement.getAttribute("data-id");p(t)})})}bindCheckbox(t){document.querySelectorAll(".form-check-input").forEach(e=>{e.addEventListener("click",function(){const e=this.parentElement.parentElement.getAttribute("data-id");d(e,t)})})}bindCompletedTasks(t){document.querySelectorAll(".completed").forEach(e=>{e.addEventListener("click",function(){const e=this.getAttribute("data-id");l(e,t)})})}renderClearButton(){const t=document.createElement("button");t.classList.add("btn","btn-primary","col-4","h-25"),t.innerHTML="Clear",t.addEventListener("click",t=>{f(this.completed)}),document.getElementById("completed").appendChild(t)}render(){(function(){return a(this,void 0,void 0,function*(){return yield i.getTasksFromServer().then(function(t){let e=1;const n=document.getElementById("tasks"),r=document.getElementById("completed");n.innerHTML="",r.innerHTML="",t.forEach(t=>{(t=new s(t.id,t.title,t.details,t.priority,t.isDone)).render(e,n,r)||e++})}).catch(t=>{console.log(t)}),i.getTasksFromServer()})})().then(t=>{this.bindEdit(t),this.bindRemove(),this.bindCheckbox(t),this.bindCompletedTasks(t),this.storeCompleted(),this.renderClearButton()})}};const m=t=>{const e=new h;i.addTask(t).then(t=>{console.log(t),e.render()}).catch(t=>{console.log(t)})};var v=class{constructor(t){this.container=document.getElementById("form"),this.defaultTask={title:"",details:"",priority:1,id:""},t&&this.render({mode:"Add",task:this.defaultTask})}setInputs(){this.title=document.getElementById("title"),this.details=document.getElementById("details"),this.priority=document.getElementById("priority"),this.submit=document.getElementById("submit")}bindAdd(){this.submit.addEventListener("click",t=>{t.preventDefault(),m(this.getInputValues()),this.render({mode:"Add",task:this.defaultTask})})}bindEdit(){this.submit.addEventListener("click",t=>{t.preventDefault(),c(this.getInputValues()),this.render({mode:"Add",task:this.defaultTask})})}getInputValues(){return{title:this.title.value,details:this.details.value,priority:this.priority.value,isDone:0,id:this.submit.getAttribute("data-id")}}renderCancelButton(){const t=document.createElement("button");t.classList.add("btn","btn-primary","col-4","h-25"),t.innerHTML="Cancel",t.addEventListener("click",t=>{t.preventDefault(),this.render({mode:"Add",task:this.defaultTask})}),this.container.appendChild(t)}render(t){this.container.innerHTML="";const e=document.createElement("fieldset");e.innerHTML=`\n            <h5>${t.mode} task:</h5>\n                <div class="form-group">\n                    <label class="col-form-label" for="title">Title:</label>\n                    <input type="text" class="form-control" placeholder="Enter note title" id="title" value="${t.task.title}">\n                </div>\n                <div class="form-group">\n                    <label for="details">Additional details (optional):</label>\n                    <textarea class="form-control" id="details" rows="3">${t.task.details}</textarea>\n                </div>\n                <div class="row">\n                    <div class="form-group col-3">\n                        <select class="form-control" id="priority" value="${t.task.priority}">\n                            <option value="1">1</option>\n                            <option value="2">2</option>\n                            <option value="3">3</option>\n                            <option value="4">4</option>\n                            <option value="5">5</option>\n                        </select>\n                        <label for="priority">Priority</label>\n                    </div>\n                    <div class="col-5"></div>\n                    <button type="submit" class="btn btn-primary col-4 h-25" id="submit" data-id="${t.task.id}">${t.mode}</button>\n                </div>\n            `,this.container.appendChild(e),this.setInputs(),"Add"===t.mode?this.bindAdd():(this.bindEdit(),this.renderCancelButton())}enableEdit(t){this.render({mode:"Edit",task:t})}};document.addEventListener("DOMContentLoaded",()=>{!function(){console.log("Initializing...");new h(!0),new v(!0)}()})},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var o,i=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(t,e,n){var r,o,i={},s=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),a=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var n=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),c=null,d=0,l=[],u=n(1);function p(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=i[r.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](r.parts[s]);for(;s<r.parts.length;s++)o.parts.push(y(r.parts[s],e))}else{var a=[];for(s=0;s<r.parts.length;s++)a.push(y(r.parts[s],e));i[r.id]={id:r.id,refs:1,parts:a}}}}function f(t,e){for(var n=[],r={},o=0;o<t.length;o++){var i=t[o],s=e.base?i[0]+e.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};r[s]?r[s].parts.push(a):n.push(r[s]={id:s,parts:[a]})}return n}function h(t,e){var n=a(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),l.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,o)}}function m(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=l.indexOf(t);e>=0&&l.splice(e,1)}function v(t){var e=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),b(e,t.attrs),h(t,e),e}function b(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function y(t,e){var n,r,o,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var s=d++;n=c||(c=v(e)),r=w.bind(null,n,s,!1),o=w.bind(null,n,s,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",b(e,t.attrs),h(t,e),e}(e),r=function(t,e,n){var r=n.css,o=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=u(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([r],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,n,e),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){m(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=s()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=f(t,e);return p(n,e),function(t){for(var r=[],o=0;o<n.length;o++){var s=n[o];(a=i[s.id]).refs--,r.push(a)}t&&p(f(t,e),e);for(o=0;o<r.length;o++){var a;if(0===(a=r[o]).refs){for(var c=0;c<a.parts.length;c++)a.parts[c]();delete i[a.id]}}}};var g,k=(g=[],function(t,e){return g[t]=e,g.filter(Boolean).join("\n")});function w(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=k(e,o);else{var i=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i)}}},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=(s=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(i).concat([o]).join("\n")}var s;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var s=t[o];"number"==typeof s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),e.push(s))}},e}},function(t,e,n){(t.exports=n(3)(!1)).push([t.i,"/* .start {\r\n    color: darkred;\r\n    text-align: center;\r\n} */",""])},function(t,e,n){var r=n(4);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,o);r.locals&&(t.exports=r.locals)}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,